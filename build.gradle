buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

apply plugin: 'kotlin'
apply plugin: 'maven'

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" }
    maven { url "https://jitpack.io" }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    reports { junitXml.setEnabled(true) }
}

jar {
    // Make JAR checksums hash repeatable
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

dependencies {
    // Note: Jitpack will publish "compile" scopes setting as <scope>compile</scope> in the pom.xml
    // but "implementation" is only published with <scope>runtime</scope>
    //
    // The decision is a a little arbitrary, but key deps are published with compile scope.
    //

    implementation("com.github.jitpack:gradle-simple:1.0")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation "com.github.dreifadotapp:registry:$registryVersion"

    compile "io.opentelemetry:opentelemetry-sdk:$opentelemetryVersion"
    compile "io.opentelemetry:opentelemetry-exporter-logging:$opentelemetryVersion"
    compile "io.opentelemetry:opentelemetry-extension-kotlin:$opentelemetryVersion"

    implementation "io.grpc:grpc-context:$opentelemetryVersion"


    // for zipkin example
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin:$opentelemetryVersion")
    //alpha module
    implementation "io.opentelemetry:opentelemetry-semconv:$opentelemetryVersion-alpha"

    testImplementation("com.natpryce:hamkrest:$hamkrestVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
    testImplementation('org.junit.platform:junit-platform-runner:1.0.0')
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
}

test {
    // set heap size for the test JVM(s). This library
    // is simple and should be testable on small JVM
    minHeapSize = "64m"
    maxHeapSize = "512m"

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}
